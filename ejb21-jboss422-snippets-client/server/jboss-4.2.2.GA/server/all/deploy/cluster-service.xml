<?xml version="1.0" encoding="UTF-8"?>

<!-- ===================================================================== -->
<!--                                                                       -->
<!--  Sample Clustering Service Configuration                              -->
<!--                                                                       -->
<!-- ===================================================================== -->

<server>

   <!-- ==================================================================== -->
   <!-- Cluster Partition: defines cluster                                   -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.ha.framework.server.ClusterPartition"
      name="jboss:service=${jboss.partition.name:DefaultPartition}">

      <!-- Name of the partition being built -->
      <attribute name="PartitionName">${jboss.partition.name:DefaultPartition}</attribute>

      <!-- The address used to determine the node name -->
      <attribute name="NodeAddress">${jboss.bind.address}</attribute>

      <!-- Determine if deadlock detection is enabled -->
      <attribute name="DeadlockDetection">False</attribute>

      <!-- Max time (in ms) to wait for state transfer to complete. Increase for large states -->
      <attribute name="StateTransferTimeout">30000</attribute>

      <!-- The JGroups protocol configuration -->
      <attribute name="PartitionConfig">
         <!--
         The default UDP stack:
         - If you have a multihomed machine, set the UDP protocol's bind_addr attribute to the
         appropriate NIC IP address, e.g bind_addr="192.168.0.2".
         - On Windows machines, because of the media sense feature being broken with multicast
         (even after disabling media sense) set the UDP protocol's loopback attribute to true
         -->
         <Config>
            <UDP mcast_addr="${jboss.partition.udpGroup:228.1.2.3}" 
                 mcast_port="${jboss.hapartition.mcast_port:45566}"
                 tos="8"
                 ucast_recv_buf_size="20000000"
                 ucast_send_buf_size="640000"
                 mcast_recv_buf_size="25000000"
                 mcast_send_buf_size="640000"
                 loopback="false"
                 discard_incompatible_packets="true"
                 enable_bundling="false"
                 max_bundle_size="64000"
                 max_bundle_timeout="30"
                 use_incoming_packet_handler="true"
                 use_outgoing_packet_handler="false"
                 ip_ttl="${jgroups.udp.ip_ttl:2}"
                 down_thread="false" up_thread="false"/>
            <PING timeout="2000"
                  down_thread="false" up_thread="false" num_initial_members="3"/>
            <MERGE2 max_interval="100000"
                    down_thread="false" up_thread="false" min_interval="20000"/>
            <FD_SOCK down_thread="false" up_thread="false"/>
            <FD timeout="10000" max_tries="5" down_thread="false" up_thread="false" shun="true"/>
            <VERIFY_SUSPECT timeout="1500" down_thread="false" up_thread="false"/>
            <pbcast.NAKACK max_xmit_size="60000"
                    use_mcast_xmit="false" gc_lag="0"
                    retransmit_timeout="300,600,1200,2400,4800"
                    down_thread="false" up_thread="false"
                    discard_delivered_msgs="true"/>
            <UNICAST timeout="300,600,1200,2400,3600"
                    down_thread="false" up_thread="false"/>
            <pbcast.STABLE stability_delay="1000" desired_avg_gossip="50000"
                    down_thread="false" up_thread="false"
                    max_bytes="400000"/>
            <pbcast.GMS print_local_addr="true" join_timeout="3000"
                    down_thread="false" up_thread="false"
                    join_retry_timeout="2000" shun="true"
                    view_bundling="true"/>
            <FRAG2 frag_size="60000" down_thread="false" up_thread="false"/>
            <pbcast.STATE_TRANSFER down_thread="false" up_thread="false" use_flush="false"/>
         </Config>

         <!-- Alternate TCP stack: customize it for your environment, change bind_addr and initial_hosts -->
         <!--
         <Config>
            <TCP bind_addr="thishost" start_port="7800" loopback="true"
                 tcp_nodelay="true"
                 recv_buf_size="20000000"
                 send_buf_size="640000"
                 discard_incompatible_packets="true"
                 enable_bundling="false"
                 max_bundle_size="64000"
                 max_bundle_timeout="30"
                 use_incoming_packet_handler="true"
                 use_outgoing_packet_handler="false"
                 down_thread="false" up_thread="false"
                 use_send_queues="false"
                 sock_conn_timeout="300"
                 skip_suspected_members="true"/>
            <TCPPING initial_hosts="thishost[7800],otherhost[7800]" port_range="3"
                     timeout="3000"
                     down_thread="false" up_thread="false"
                     num_initial_members="3"/>
            <MERGE2 max_interval="100000"
                    down_thread="false" up_thread="false" min_interval="20000"/>
            <FD_SOCK down_thread="false" up_thread="false"/>
            <FD timeout="10000" max_tries="5" down_thread="false" up_thread="false" shun="true"/>
            <VERIFY_SUSPECT timeout="1500" down_thread="false" up_thread="false"/>
            <pbcast.NAKACK max_xmit_size="60000"
                           use_mcast_xmit="false" gc_lag="0"
                           retransmit_timeout="300,600,1200,2400,4800"
                           down_thread="false" up_thread="false"
                           discard_delivered_msgs="true"/>
            <pbcast.STABLE stability_delay="1000" desired_avg_gossip="50000"
                           down_thread="false" up_thread="false"
                           max_bytes="400000"/>
            <pbcast.GMS print_local_addr="true" join_timeout="3000"
                        down_thread="false" up_thread="false"
                        join_retry_timeout="2000" shun="true"
                        view_bundling="true"/>
            <pbcast.STATE_TRANSFER down_thread="false" up_thread="false" use_flush="false"/>
         </Config>
         -->
      </attribute>
      <depends>jboss:service=Naming</depends>
   </mbean>

   <!-- ==================================================================== -->
   <!-- HA Session State Service for SFSB                                    -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.ha.hasessionstate.server.HASessionStateService"
      name="jboss:service=HASessionState">
      <depends>jboss:service=Naming</depends>
      <!-- We now inject the partition into the HAJNDI service instead
           of requiring that the partition name be passed -->
      <depends optional-attribute-name="ClusterPartition"
         proxy-type="attribute">jboss:service=${jboss.partition.name:DefaultPartition}</depends>
      <!-- JNDI name under which the service is bound -->
      <attribute name="JndiName">/HASessionState/Default</attribute>
      <!-- Max delay before cleaning unreclaimed state.
           Defaults to 30*60*1000 => 30 minutes -->
      <attribute name="BeanCleaningDelay">0</attribute>
   </mbean>

   <!-- ==================================================================== -->
   <!-- HA JNDI                                                              -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.ha.jndi.HANamingService"
      name="jboss:service=HAJNDI">
      <!-- We now inject the partition into the HAJNDI service instead
           of requiring that the partition name be passed -->
      <depends optional-attribute-name="ClusterPartition"
         proxy-type="attribute">jboss:service=${jboss.partition.name:DefaultPartition}</depends>
      <!-- Bind address of bootstrap and HA-JNDI RMI endpoints -->
      <attribute name="BindAddress">${jboss.bind.address}</attribute>
      <!-- Port on which the HA-JNDI stub is made available -->
      <attribute name="Port">1100</attribute>
      <!-- RmiPort to be used by the HA-JNDI service once bound. 0 => auto. -->
      <attribute name="RmiPort">1101</attribute>
      <!-- Accept backlog of the bootstrap socket -->
      <attribute name="Backlog">50</attribute>
      <!-- The thread pool service used to control the bootstrap and
      auto discovery lookups -->
      <depends optional-attribute-name="LookupPool"
         proxy-type="attribute">jboss.system:service=ThreadPool</depends>

      <!-- A flag to disable the auto discovery via multicast -->
      <attribute name="DiscoveryDisabled">false</attribute>
      <!-- Set the auto-discovery bootstrap multicast bind address. If not
      specified and a BindAddress is specified, the BindAddress will be used. -->
      <attribute name="AutoDiscoveryBindAddress">${jboss.bind.address}</attribute>
      <!-- Multicast Address and group port used for auto-discovery -->
      <attribute name="AutoDiscoveryAddress">${jboss.partition.udpGroup:230.0.0.4}</attribute>
      <attribute name="AutoDiscoveryGroup">1102</attribute>
      <!-- The TTL (time-to-live) for autodiscovery IP multicast packets -->
      <attribute name="AutoDiscoveryTTL">16</attribute>
      <!-- The load balancing policy for HA-JNDI -->
      <attribute name="LoadBalancePolicy">org.jboss.ha.framework.interfaces.RoundRobin</attribute>

      <!-- Client socket factory to be used for client-server
           RMI invocations during JNDI queries
      <attribute name="ClientSocketFactory">custom</attribute>
      -->
      <!-- Server socket factory to be used for client-server
           RMI invocations during JNDI queries
      <attribute name="ServerSocketFactory">custom</attribute>
      -->
   </mbean>

   <!-- ==================================================================== -->
   <!-- HA Invokers                                                          -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.invocation.unified.server.UnifiedInvokerHA"
      name="jboss:service=invoker,type=unifiedha">
      <depends>jboss:service=TransactionManager</depends>
      <depends optional-attribute-name="Connector"
       proxy-type="attribute">jboss.remoting:service=Connector,transport=socket</depends>
      <depends>jboss:service=${jboss.partition.name:DefaultPartition}</depends>
   </mbean>

   <mbean code="org.jboss.invocation.jrmp.server.JRMPInvokerHA"
      name="jboss:service=invoker,type=jrmpha">
      <attribute name="ServerAddress">${jboss.bind.address}</attribute>
      <attribute name="RMIObjectPort">4447</attribute>
      <!--
      <attribute name="RMIClientSocketFactory">custom</attribute>
      <attribute name="RMIServerSocketFactory">custom</attribute>
      -->
      <depends>jboss:service=Naming</depends>
   </mbean>

   <!-- the JRMPInvokerHA creates a thread per request.  This implementation uses a pool of threads -->
   <mbean code="org.jboss.invocation.pooled.server.PooledInvokerHA"
      name="jboss:service=invoker,type=pooledha">
      <attribute name="NumAcceptThreads">1</attribute>
      <attribute name="MaxPoolSize">300</attribute>
      <attribute name="ClientMaxPoolSize">300</attribute>
      <attribute name="SocketTimeout">60000</attribute>
      <attribute name="ServerBindAddress">${jboss.bind.address}</attribute>
      <attribute name="ServerBindPort">4448</attribute>
      <attribute name="ClientConnectAddress">${jboss.bind.address}</attribute>
      <attribute name="ClientConnectPort">0</attribute>
      <attribute name="EnableTcpNoDelay">false</attribute>
      <depends optional-attribute-name="TransactionManagerService">jboss:service=TransactionManager</depends>
      <depends>jboss:service=Naming</depends>
   </mbean>

   <!-- ==================================================================== -->

   <!-- ==================================================================== -->
   <!-- Distributed cache invalidation                                       -->
   <!-- ==================================================================== -->

   <mbean code="org.jboss.cache.invalidation.bridges.JGCacheInvalidationBridge"
      name="jboss.cache:service=InvalidationBridge,type=JavaGroups">
      <!-- We now inject the partition into the HAJNDI service instead
           of requiring that the partition name be passed -->
      <depends optional-attribute-name="ClusterPartition"
         proxy-type="attribute">jboss:service=${jboss.partition.name:DefaultPartition}</depends>
      <depends>jboss.cache:service=InvalidationManager</depends>
      <attribute name="InvalidationManager">jboss.cache:service=InvalidationManager</attribute>
      <attribute name="BridgeName">DefaultJGBridge</attribute>
   </mbean>

</server>
